const Product = require('../model/productModel');

const add_product = async (req, res) => {

    try {
        const product = new Product({
            user_id: req.user._id,
            category: req.body.product_name,
            category: req.body.sku,
            category: req.body.description,
            category: req.body.category,
            category: req.body.source,
            
        });

        const productData = await product.findOne({ product_name: req.body.name });
        if (productData) {
        res
            .status(400)
            .send({ success: false, msg: "This Product is already exists." });
        } else {
        const product_data = await product.save();
        res.status(200).send({ success: true, data: cat_data });
        }
    } catch (error) {
        console.error(error);
        res.status(400).send({success: false, msg: error.message})
    } 
}

const getcategories = async (req, res) => {

  try {
    const cdata = await Category.find({});
    res.status(200).send({success: true, msg:"category details fetched successfully.", data: cdata});
  } catch (error) {
    res.status(400).send({success: false, msg: error.message});
  }
  
}

const delete_category = async (req, res) => {
    const deleteid = req.params.id;
    try {
        
        const del_category = await Category.findByIdAndRemove({_id:deleteid});
        res.status(200).send({ success: true,  msg:"Category has delete successfully."});
        
      } catch (error) {
        res.status(400).send({success: false, msg: error.message});
      }

}

const deleteproduct = async (req, res) => {
    const deleteid = req.params.id;
    
    try {
      if(req.user._id != deleteid){
        return res.status(200).send({success: true, msg:"Authrization token is not matched."});
      }
      
      const del_user = await User.findByIdAndRemove({_id:deleteid});
      res.status(200).send({ success: true,  msg:"User has deleted successfully."});
      
    } catch (error) {
      res.status(400).send({success: false, msg: error.message});
    }
}

const getproduct = async (req, res) => {
  const id = req.params.id;

  try {
    if(req.user._id != id){
      return res.status(200).send({success: true, msg:"Authrization token is not matched."});
    }
  
    const userdata = await User.findById({_id:id});
    res.status(200).send({success: true, msg:"Product details fetched successfully.", data: userdata});
  } catch (error) {
    res.status(400).send({success: false, msg: error.message});
  }
  
}

const updateproduct = async (req, res) =>{
  const uid = req.params.id;

  try {
    if(req.user._id != uid){
      return res.status(200).send({success: true, msg:"Authrization token is not matched."});
    }

    const userdata = User.findOne({ _id : uid});
    
    if(!userdata) return res.status(404).json({success: false, msg:"user is not found !!!"});
    const new_pname = req.body.product_name;
    const new_psku = req.body.sku;
    const new_pdescription = req.body.description;
    const new_category = req.body.category;
    const new_source = req.body.source;
    
    const updatedata = await User.findByIdAndUpdate({ _id:uid }, {
      $set: {
        product_name: new_pname, sku: new_psku, description: new_pdescription, category: new_category, source: new_source
      }},{new: true});
    
    if(updatedata) res.status(200).json({success: true, msg:`Product updated with ${updatedata} successfully.`})
    
  } catch (error) {
    res.status(400).json({success: false, msg: error.message});
  }
}

const getallproducts = async (req, res) => {

  try {
    const allUserDetails = User.find({}, function(err, usersData){
      if(err)
        console.log(err);
      if(usersData){
        // console.log("Users count : " + usersData.length);
        // console.log(usersData);
        res.status(200).send({success:true,msg:"All Users Data has Fetched Successfully.", result:usersData});
      }  
    });

  } catch (error) {
    res.status(400).json({success: false, msg: error.message});
  }
  
}

module.exports = {
    add_product,
    getproduct,
    deleteproduct,
    updateproduct,
    getallproducts
};